//=============================================================================
// ■ memory.h
//-----------------------------------------------------------------------------
//   Driver > Basic > i686 > memory
//=============================================================================

#ifndef INCLUDE_MEMORY_H_
#define INCLUDE_MEMORY_H_

#include "Basic/types.h"
#include "Basic/multiboot.h"

#define SL_RW_P 3 // attributes: supervisor level, read/write, present.

class Memory {
	private:
	//---------------------------------------------------------------------------
	// ● 页表&页目录
	//---------------------------------------------------------------------------
	uint32_t volatile page_directory[1024] __attribute__((aligned(4096)));
	uint32_t volatile kern_page_table[1024] __attribute__((aligned(4096)));
	uint32_t mem_size, upper_mem, page_count;
	uint8_t volatile *phy_c;
	// 0 1 4 8 256 -> 0 4 16 32 1024

	public:
	//---------------------------------------------------------------------------
	// ● 占有物理内存(页计数)
	//---------------------------------------------------------------------------
	void AllocPhy(uint32_t f, uint32_t t);
	//---------------------------------------------------------------------------
	// ● 释放物理内存(页计数)
	//---------------------------------------------------------------------------
	void ReleasePhy(uint32_t f, uint32_t t);
	//---------------------------------------------------------------------------
	// ● 寻找连续空闲内存(页计数) - 返回空闲内存区起点 - 0为未找到
	//---------------------------------------------------------------------------
	uint32_t SearchFree(uint32_t length);
	//---------------------------------------------------------------------------
	// ● 将页表绑定入页目录
	//---------------------------------------------------------------------------
	void map_pages_to_dir(int page_id, uint32_t* page_tab, uint8_t flag);
	//---------------------------------------------------------------------------
	// ● 将内存绑定入页表 (KByte计数)
	//---------------------------------------------------------------------------
	void map_physical_to_page_tab(uint32_t* page_tab, uint8_t flag, uint32_t f, uint32_t t);
	//---------------------------------------------------------------------------
	// ● 内存初始化
	//---------------------------------------------------------------------------
	Memory();
};

#endif
